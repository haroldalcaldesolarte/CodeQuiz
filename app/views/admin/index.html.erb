<%= render 'partials/loader' %>

<div class="container mt-5">
  <div class="card shadow-lg">
    <div class="card-body text-center">
      <h5 class="card-title">Sube tus preguntas en formato JSON</h5> 
      <div id="drop-zone" class="p-5 border border-primary rounded" style="border-style: dashed; cursor: pointer;">
        <p id="drop-zone-text">Arrastra y suelta el archivo aquí, o haz clic para seleccionarlo</p>
        <input type="file" id="file-input" accept="application/json" style="display: none;">
        <p id="file-name" class="mt-3 text-primary font-weight-bold" style="display: none;"></p>
      </div>
      <button id="upload-button" class="btn btn-primary mt-3">Subir archivo
        <i class="fas fa-cloud-arrow-up"></i>
      </button>
    </div>
  </div>

  <div class="text-start mt-4">
    <h6>Formato JSON esperado:</h6>
    <pre>
      {
        "questions":[
          {
            "text": "¿Qué componente es responsable de la ejecución de las instrucciones en un sistema informático?",
            "category_id": 1,
            "level_id": 1,
            "approved": true,
            "author_id": 1,
            "revisor_id": 1,
            "answers": [
              {"text": "CPU", "correct": true},
              {"text": "RAM", "correct": false},
              {"text": "Disco duro", "correct": false},
              {"text": "Placa base", "correct": false}
            ]
          },
          {
            "text": "¿Qué función cumple la memoria RAM en un sistema?",
            "category_id": 1,
            "level_id": 1,
            "approved": true,
            "answers": [
              {"text": "Almacenar datos temporalmente", "correct": true},
              {"text": "Almacenar datos permanentemente", "correct": false},
              {"text": "Ejecutar programas", "correct": false },
              {"text": "Controlar el sistema operativo","correct": false}
            ]
          },
          {
            "text": "¿Qué es una clave primaria en una base de datos?",
            "category_id": 2,
            "level_id": 2,
            "approved": true,
            "author_id": 1,
            "revisor_id": 2,
            "answers": [
              {"text": "Un campo único que identifica un registro", "correct": true},
              {"text": "Un campo que establece relaciones entre tablas", "correct": false},
              {"text": "Un índice que acelera las búsquedas", "correct": false},
              {"text": "Un campo que contiene datos redundantes","correct": false}
            ]
          }
        ]
      }
    </pre>
  </div>
</div>

<script>
 document.addEventListener("DOMContentLoaded", function() {
  const dropZone = document.getElementById("drop-zone");
  const fileInput = document.getElementById("file-input");
  const fileNameDisplay = document.getElementById("file-name");
  const uploadButton = document.getElementById("upload-button");
  const loader = document.getElementById("loader");

  // Abre el selector de archivos al hacer clic en el área de drop
  dropZone.addEventListener("click", () => fileInput.click());

  // Maneja el evento "drag and drop" solo para seleccionar el archivo
  dropZone.addEventListener("dragover", (e) => {
    e.preventDefault();
    dropZone.classList.add("bg-light", "border-success");
  });

  dropZone.addEventListener("dragleave", () => {
    dropZone.classList.remove("bg-light", "border-success");
  });

  dropZone.addEventListener("drop", (e) => {
    e.preventDefault();
    dropZone.classList.remove("bg-light", "border-success");
    const file = e.dataTransfer.files[0];
    if (file) displayFileName(file);
    fileInput.files = e.dataTransfer.files; // Actualiza el input file para almacenar el archivo
  });

  // Muestra el nombre del archivo seleccionado
  fileInput.addEventListener("change", () => {
    const file = fileInput.files[0];
    if (file) displayFileName(file);
  });

  // Subir archivo al hacer clic en el botón
  uploadButton.addEventListener("click", () => {
    const file = fileInput.files[0];
    if (file) {
      uploadFile(file);
    } else {
      alert("Por favor, selecciona un archivo primero.");
    }
  });

  
  function displayFileName(file) {
    document.getElementById("drop-zone-text").style.display = "none";
    fileNameDisplay.style.display = "block";
    fileNameDisplay.textContent = `Archivo seleccionado: ${file.name}`;
  }

  // Función para enviar el archivo al servidor
  function uploadFile(file) {
    const formData = new FormData();
    formData.append("file", file);

    loader.classList.remove("d-none");
    uploadButton.disabled = true;
    dropZone.style.pointerEvents = "none";

    fetch("<%= upload_questions_admin_index_path %>", {
      method: "POST",
      body: formData,
      headers: {
        "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      showFloatingMessage(data.message, data.success);
    })
    .catch(error => {
      console.error("Error:", error);
      showFloatingMessage(`Hubo un problema al procesar el archivo. Error: ${error}`, false);
    })
    .finally(() => {
      loader.classList.add("d-none");
      uploadButton.disabled = false;
      dropZone.style.pointerEvents = "auto";
      resetDropZone();
    });
  }

  function resetDropZone() {
    fileInput.value = "";
    fileNameDisplay.style.display = "none";
    document.getElementById("drop-zone-text").style.display = "block";
    dropZone.classList.remove("bg-light", "border-success");
  }

  function showFloatingMessage(message, success) {
    const alertDiv = document.createElement("div");
    alertDiv.id = "flotating-alert-upload-questions";
    alertDiv.classList.add("alert", success ? "alert-success" : "alert-danger", "alert-dismissible", "fade", "show", "position-fixed", "top-0", "start-50", "translate-middle-x", "w-50", "z-index-1050");
    alertDiv.role = "alert";
    alertDiv.textContent = message;

    //Btn cierrre
    const closeButton = document.createElement("button");
    closeButton.type = "button";
    closeButton.classList.add("btn-close");
    closeButton.setAttribute("data-bs-dismiss", "alert");
    closeButton.setAttribute("aria-label", "Close");
    alertDiv.appendChild(closeButton);

    document.body.appendChild(alertDiv);

    setTimeout(() => {
      alertDiv.remove();
    }, 5000);
  }
});
</script>
